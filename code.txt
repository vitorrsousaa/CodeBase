*React:*
ReactDOM.render:
- Recebe como parametro um elemento  JSX, e um container HTML;

React.Fragment (<> </>):
- Permite retornar dois elementos HTML adjacentes;

React.createContext( ):
- Permite criar um contexto;
- Passamos como parametro o valor default para aquele contexto;

Context.Provider( value={}):
- O provider ficar por volta dos elementos que vão utilizar aquele contexto;
- Deve receber a propriedade value, que vai conter todos os valores atualizados que queremos permitir que os elementos possam utilizar do contexto;

useContext():
- Passamos como parametro o nome do nosso contexto;
- Atribui o valor do contexto para uma variável existente, possibilitando utilizar o que foi passado no contexto;



*JavaScript:*
TimeStamp:
- Um número que representa a data e hora atual no modelo unix
- Math.floor(Date.now()/1000)

*TypeScript:*
Interface:
- Define elements properties;

Type ReactNode:
- Tipo exportado do react que aceita qualquer componente HTML;

Omit< 'Tipo já criado', 'parametro' | 'parametro'>:
- A function Omit repete um tipo criado para a criação de uma tipagem nova, e recebe como parametro os categorias que queremos omitir da tipagem pai;

*CSS*
Placeholder:
- Inform the text that will appear in the box;

Align itens in the center of a display:flex :
Use this properties:
- Align-items: center;

*GIT*
git push origin --delete nomedabranch:
- Delete a remote branch;

git branch -D nome da branch:
- Delete a local branch;

git init:
- Start git in the terminal;

git add .
- Commit the file you staged in to your local repository;

git commit -m "text" 
- Commit the files;

git remote add origin https://github.com/vitorrsousaa/ClothingStore.git
git branch -M main
git push -u origin main

*TERMINAL*
cd ..
- Returning one past

*LIFE*
CMS
- Painel de administração para cadastrar as aplicações e servir os dados para a aplicação. Ex: WordPress;

APLICAÇÕES SERVELESS
- Cada rota da aplicação é rodada de forma isolada. Uma máquina virtual é criar para rodar uma rota da aplicação, e depois é encerrada;
